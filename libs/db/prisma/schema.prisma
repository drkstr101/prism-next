generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Entity {
  id   String @id @db.Uuid
  data Json?

  @@map("entities")
}

model Identity {
  id                           String    @id @db.Uuid
  created                      DateTime  @default(now()) @db.Timestamptz(6)
  updated                      DateTime? @db.Timestamptz(6)
  user_id                      String    @db.Uuid
  type                         String
  provider                     String?
  oauth_access_token           String?
  oauth_refresh_token          String?
  is_default                   Boolean?  @default(false)
  email                        String    @unique(map: "unique_email")
  is_verified                  Boolean   @default(false)
  is_social                    Boolean?
  profile_data                 Json?
  verification_token           String?   @unique(map: "unique_verification_token")
  verification_token_timestamp DateTime? @db.Timestamptz(6)
  user                         User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "identities_user_id_foreign")

  @@map("identities")
}

model Migration {
  id     String    @id
  run_at DateTime? @default(now()) @db.Timestamptz(6)

  @@map("migrations")
}

model TeamMember {
  id      String    @id @db.Uuid
  created DateTime? @default(now()) @db.Timestamptz(6)
  updated DateTime? @default(now()) @db.Timestamptz(6)
  status  String?   @db.VarChar(255)
  team_id String    @db.Uuid
  user_id String    @db.Uuid
  team    Team      @relation(fields: [team_id], references: [id], onDelete: Cascade, map: "team_members_team_id_foreign")
  user    User      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "team_members_user_id_foreign")

  @@unique([team_id, user_id], map: "team_members_team_id_user_id_unique")
  @@map("team_members")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Team {
  id           String       @id @db.Uuid
  created      DateTime     @default(now()) @db.Timestamptz(6)
  updated      DateTime?    @db.Timestamptz(6)
  object_id    String?      @db.Uuid
  object_type  String?      @db.VarChar(255)
  display_name String
  role         String
  global       Boolean?     @default(false)
  type         String
  teamMembers  TeamMember[]

  @@map("teams")
}

model User {
  id                         String       @id @db.Uuid
  created                    DateTime     @default(now()) @db.Timestamptz(6)
  updated                    DateTime?    @db.Timestamptz(6)
  username                   String?      @unique(map: "users_username_unique") @db.VarChar(255)
  password_hash              String?
  password_reset_token       String?
  password_reset_timestamp   DateTime?    @db.Timestamptz(6)
  agreed_tc                  Boolean      @default(false)
  is_active                  Boolean      @default(false)
  invitation_token           String?
  invitation_token_timestamp DateTime?    @db.Timestamptz(6)
  given_names                String?
  surname                    String?
  title_pre                  String?
  title_post                 String?
  type                       String
  identities                 Identity[]
  teamMembers                TeamMember[]

  @@map("users")
}
